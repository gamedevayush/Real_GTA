[v4.3.0]
This new update brings some transparent shaders already edited to work with the "post-processing" fog scattering effect of the Standard Sky System.
Instead of using Unity's transparent shaders, you must set to your materials the alternative Azure's versions addressed at:
Azure[Sky]/BuiltIn/...


As you read these instructions, you can at the same time follow the Unlit-Alpha(Azure[Sky]/BuiltIn/Unlit/Transparent) shader code that came with the package to see how the code was modified.


//////////////////////////////////////////////////////
/// Adding transparency support to custom shaders. ///

1ª: Add this line of code shortly after the CGPROGRAM starts.
#include "Assets/Azure[Sky] Dynamic Skybox/Shaders/Transparent/AzureFogCore.cginc"



2ª: Add 1 extra TEXCOORD definition to the "vertex to fragment" shader struct to store the world position.
Exemple1:
struct v2f
{
	float3 worldPos : TEXCOORD0;
};

Exemple2:
struct v2f
{
	float4 vertex : SV_POSITION;
	float2 texcoord : TEXCOORD0;
	UNITY_FOG_COORDS(1)
	float3 worldPos : TEXCOORD3;
	UNITY_VERTEX_OUTPUT_STEREO
};



3ª: Now in the vertex shader, it is necessary to calculate the vertex world position and store it in the extra TEXCOORD that we have created.
Add this line to your vertex shader:
o.worldPos = mul(unity_ObjectToWorld, v.vertex); // v.vertex is the mesh vertex POSITION data, change to your own definition if you used a different nomenclature.
                                                 // "o" is the vertex shader "Output".

Exemple:
v2f vert (appdata_t v)
{
	v2f o;
	o.vertex = UnityObjectToClipPos(v.vertex);
	o.worldPos = mul(unity_ObjectToWorld, v.vertex);
	return o;
}



4ª: And last but not least, you need to apply the fog color to the output color of the fragment shader(pixel shader). Using the following command:
ApplyAzureFog(float4 fragOutput, float3 worldPos)
- In the 1º argument you need to define the output of your pixel shader.
- In the 2º argument you need to define the TEXCOORD from the "vertex to pixel" struct that stores the world position data.

Exemple1: Fragment shader without modifications.
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);
	return col;
}

Exemple2:
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);

	col = ApplyAzureFog(col, i.worldPos);
	return col;
}

Exemple3: Example 2 with the simplified code.
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);

	return ApplyAzureFog(col, i.worldPos);
}